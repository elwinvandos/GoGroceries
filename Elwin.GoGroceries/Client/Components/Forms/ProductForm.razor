@inject HttpClient Http
@inject NavigationManager Navigation
@using Elwin.GoGroceries.Client.Helpers;
@using Elwin.GoGroceries.Contracts;
@using Elwin.GoGroceries.Contracts.Post;
@using System.Net;
@using Elwin.GoGroceries.Contracts.Product;
@typeparam TItem where TItem : ProductDto

<MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
    <MudTextField T="string" Label="Name" Required="true" RequiredError="Shopping item requires a name!" @bind-Value="PostProduct.Name" Validation="@(new Func<string, Task<string>>(CheckProductDuplicate))" />
    <MudNumericField @bind-Value="PostProduct.Quantity" Label="Quantity" Variant="Variant.Text" Min="1" Max="100" />
    <MudTextField T="string" Label="Measurement" HelperText="For example: '400g' or 'cartons'" @bind-Value="PostProduct.Measurement" />
    @if (!string.IsNullOrEmpty(PostProduct.Measurement))
    {
        <MudNumericField @bind-Value="PostProduct.MeasurementQuantity" Label="Quantity in measurement" HelperText="For example: 12 (eggs in a carton)" Variant="Variant.Text" Min="1" Max="1000" />
    }
    <SearchBox Label="Search category" Items="categories" InputCategory="PostProduct.Category"></SearchBox>
    <div style="display: flex; align-items: center; margin-top: 0.5rem;">
        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Disabled="@(!success)" Class="mr-auto" OnClick="() => Save(PostProduct)">Save</MudButton>
        @ChildContent
    </div>
</MudForm>

@code {
    [Parameter]
    public Guid ListId { get; set; }

    [Parameter]
    public TItem Product { get; set; }

    [Parameter]
    public Guid? CategoryId { get; set; }

    [Parameter]
    public EventCallback<PostProductDto> OnSave { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private bool success { get; set; } = false;
    private string[] errors { get; set; } = { };
    private MudForm? form { get; set; } = new MudForm();

    private ICollection<CategoryDto>? categories { get; set; } = new List<CategoryDto>();
    private PostProductDto PostProduct = new();

    protected override async Task OnParametersSetAsync()
    {
        var res = await Http.GetAsync($"Categories");
        categories = await HttpResultHelper.Process(res, () => res.Content.ReadFromJsonAsync<ICollection<CategoryDto>>());

        if (Product.Id != Guid.Empty)
        {
            PostProduct = new PostProductDto()
                {
                    Id = Product.Id,
                    Name = Product.Name,
                    Measurement = Product.Measurement,
                    MeasurementQuantity = Product.MeasurementQuantity,
                    Quantity = Product.Quantity,
                    Category = categories.Single(c => c.Id == Product.CategoryId)
                };
        }

        if (CategoryId is not null)
        {
            PostProduct.Category = categories.Single(c => c.Id == CategoryId);
        }
    }

    protected async Task Save(PostProductDto product)
    {    
        await OnSave.InvokeAsync(PostProduct);
        PostProduct = new();
    }

    protected async Task<string> CheckProductDuplicate(string name)
    {
        if (!string.IsNullOrEmpty(name) && Product?.Name != name)
        {
            var apiController = Product is ListProductDto ? "GroceryLists" : "Templates";
            var res = await Http.GetAsync($"{apiController}/checkProductExists/{ListId}/" + Uri.EscapeDataString(name) + $"/{PostProduct.Category.Id}");
            var exists = await HttpResultHelper.Process(res, () => res.Content.ReadFromJsonAsync<bool>());

            if (exists) return "Product name already exists in this category.";
        }
        return null;
    }
}
