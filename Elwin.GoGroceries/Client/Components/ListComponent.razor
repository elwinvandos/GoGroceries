@using Elwin.GoGroceries.Contracts;
@typeparam TItem where TItem : NamedDtoBase

<ul>
    @if (Items is not null)
    {
        @foreach (var item in Items)
        {
            <li Style="display: flex; align-items: center; justify-content: space-around;">
                <div style="width: 88%;" @onclick="() => ClickListItem(item.Id)">
                    @item.Name
                </div>
                <div style="width: 12%; display: flex; justify-content: center;">
                    <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Style="font-size: 2rem;" Class="delete-icon" @onclick="() => Delete(item.Id)" />
                </div>
            </li>
        }
        <li @onclick="() => AddNew()">
            <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon> Add item
        </li>
    }
</ul>

@code {
    [Parameter]
    public IEnumerable<TItem> Items { get; set; } = null!;

    [Parameter]
    public EventCallback<Guid> OnClickListItem { get; set; }

    [Parameter]
    public EventCallback OnAdd { get; set; }

    [Parameter]
    public EventCallback<Guid> OnDelete { get; set; }

    protected async Task AddNew()
    {
        await OnAdd.InvokeAsync();
    }

    protected async Task Delete(Guid id)
    {
        await OnDelete.InvokeAsync(id);
    }

    protected async Task ClickListItem(Guid id)
    {
        await OnClickListItem.InvokeAsync(id);
    }
}
