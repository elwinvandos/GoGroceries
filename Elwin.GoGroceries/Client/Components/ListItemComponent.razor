@using Elwin.GoGroceries.Contracts;
@using Elwin.GoGroceries.Contracts.DtoBases;
@typeparam TItem where TItem : NamedDtoBase

<li Style="display: flex; align-items: center; justify-content: space-around;" @onclick="() => OnClickListItem.InvokeAsync(Item.Id)">
    <div style="@_nameWidth">
        @Item.Name
    </div>
    @if (ChildContent is not null)
    {
        <div style="width: 50%;">
            @ChildContent
        </div>
    }
    <div style="width: 10%; display: flex; justify-content: space-around;">
        @if (ShowEdit)
        {
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="edit-icon" @onclick="() => OnEdit.InvokeAsync(Item.Id)" />
        }
        <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="delete-icon" @onclick="() => OnDelete.InvokeAsync(Item.Id)" />
    </div>
</li>

@code {
    [Parameter]
    public TItem Item { get; set; } = null!;

    [Parameter]
    public bool ShowEdit { get; set; } = false;

    [Parameter]
    public EventCallback<Guid> OnClickListItem { get; set; }

    [Parameter]
    public EventCallback<Guid> OnEdit { get; set; }

    [Parameter]
    public EventCallback<Guid> OnDelete { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private string _nameWidth => ChildContent is null ? "width: 90%" : "width: 35%";
}
