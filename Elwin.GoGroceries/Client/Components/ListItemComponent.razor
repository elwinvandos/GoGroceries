@using Elwin.GoGroceries.Contracts;
@using Elwin.GoGroceries.Contracts.DtoBases;
@typeparam TItem where TItem : NamedDtoBase

<li Style="display: flex; align-items: center; justify-content: space-around;">
    <div style="@_nameWidth" @onclick="() => ClickListItem(Item.Id)">
        @Item.Name
    </div>
    @if (ChildContent is not null)
    {
        <div style="width: 36%;">
            @ChildContent
        </div>
    }
    <div style="width: 12%; display: flex; justify-content: center;">
        <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Style="font-size: 2rem;" Class="delete-icon" @onclick="() => Delete(Item.Id)" />
    </div>
</li>

@code {
    [Parameter]
    public TItem Item { get; set; } = null!;

    [Parameter]
    public EventCallback<Guid> OnClickListItem { get; set; }

    [Parameter]
    public EventCallback<Guid> OnDelete { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    private string _nameWidth => ChildContent is null ? "width: 88%" : "width: 52%";

    protected async Task Delete(Guid id)
    {
        await OnDelete.InvokeAsync(id);
    }

    protected async Task ClickListItem(Guid id)
    {
        await OnClickListItem.InvokeAsync(id);
    }
}
