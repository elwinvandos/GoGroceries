@using Elwin.GoGroceries.Client.Components
@using Elwin.GoGroceries.Contracts;
@using Elwin.GoGroceries.Client.Helpers;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IDialogService DialogService
@page "/"

<MudPaper Width="100%">
    <MudText Typo="Typo.h6" Align="Align.Center">Grocery Lists</MudText>
    <MudDivider></MudDivider>
    <ListComponent Items="groceryLists" ShowEdit="true" OnAdd="AddNew" OnEdit="Edit" OnDelete="Delete" OnClickListItem="GoToGroceryList"></ListComponent>
</MudPaper>

@code {
    private ICollection<GroceryListDto>? groceryLists { get; set; } = new List<GroceryListDto>();

    protected override async Task OnInitializedAsync()
    {
        var res = await Http.GetAsync("GroceryLists");

        groceryLists = await HttpResultHelper.Process(res, () => res.Content.ReadFromJsonAsync<ICollection<GroceryListDto>>());
        StateHasChanged();
    }

    protected void GoToGroceryList(Guid id)
    {
        Navigation.NavigateTo($"/grocerylist/{id}");
    }

    protected void AddNew() => Navigation.NavigateTo($"/grocerylists/add");

    protected async Task Delete(Guid id)
    {
        var dialogRes = await DialogService.ShowMessageBox("Warning", "Do you want to delete this grocery list?", yesText: "Delete", cancelText: "Cancel");

        if (dialogRes is true)
        {
            var res = await Http.DeleteAsync($"GroceryLists/{id}");

            if (res.IsSuccessStatusCode)
            {
                groceryLists?.Remove(groceryLists.Single(l => l.Id == id));
                StateHasChanged();
            }
        }
    }

    protected void Edit(Guid id)
    {
        Navigation.NavigateTo($"/grocerylists/{id}");
    }
}
