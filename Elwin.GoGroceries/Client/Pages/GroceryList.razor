@using Elwin.GoGroceries.Client.Helpers;
@using Elwin.GoGroceries.Contracts;
@using Elwin.GoGroceries.Client.Components;
@inject HttpClient Http
@inject NavigationManager Navigation
@page "/grocerylist/{id:guid}"


@if (categories is not null & groceryList?.Products is not null)
{
    @if (groceryList?.Products?.Count() > 0)
    {
        <MudPaper Width="100%">
            <MudExpansionPanels MultiExpansion="true">
                @foreach (var category in categories)
                {
                    @if (groceryList.Products.Any(i => i.CategoryId == category.Id & !i.IsCheckedOff))
                    {
                        <MudExpansionPanel IsInitiallyExpanded="true">
                            <TitleContent>
                                <div style="display: flex; align-items: center; justify-content: space-between;">
                                    <span>@category.Name</span>
                                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary" @onclick="() => AddNew(category.Id)"></MudIconButton>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <ul>
                                    @foreach (var item in groceryList.Products.Where(i => i.CategoryId == category.Id & !i.IsCheckedOff))
                                    {
                                        <ListProductComponent Product="item" OnDelete="Delete" OnClickListItem="ClickListItem"></ListProductComponent>
                                    }
                                </ul>
                            </ChildContent>
                        </MudExpansionPanel>
                    }
                }
                @if (checkedOffProducts.Count() > 0)
                {
                    <MudExpansionPanel Text="Checked off products">
                        <ul style="text-decoration: line-through">
                            @foreach (var item in checkedOffProducts)
                            {
                                <ListProductComponent Product="item" OnDelete="Delete" OnClickListItem="ClickListItem"></ListProductComponent>
                            }
                        </ul>
                    </MudExpansionPanel>
                }
            </MudExpansionPanels>
        </MudPaper>
        <div style="display: flex; align-items: center; justify-content: center; margin-top: 0.5rem;">
            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="() => AddNew()">Add product</MudButton>
        </div>
    }
    else
    {
        <div style="display: flex; align-items: center; justify-content: center;">
            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="() => AddNew()">Add first product</MudButton>
        </div>
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private GroceryListDto groceryList { get; set; } = new() { Products = new List<ProductDto>() };
    private IEnumerable<CategoryDto>? categories { get; set; }

    private IEnumerable<ProductDto> checkedOffProducts => groceryList.Products.Where(i => i.IsCheckedOff);

    protected override async Task OnInitializedAsync()
    {
        var categoriesRes = await Http.GetAsync($"Categories");
        categories = await HttpResultHelper.Process(categoriesRes, () => categoriesRes.Content.ReadFromJsonAsync<IEnumerable<CategoryDto>>());

        var groceryListRes = await Http.GetAsync($"GroceryLists/{Id}");
        groceryList = await HttpResultHelper.Process(groceryListRes, () => groceryListRes.Content.ReadFromJsonAsync<GroceryListDto>());
    }

    protected void AddNew()
    {
        Navigation.NavigateTo($"/groceryList/{Id}/add");
    }

    protected void AddNew(Guid categoryId)
    {
        Navigation.NavigateTo($"/groceryList/{Id}/add/{categoryId}");
    }

    protected async Task Delete(Guid productId)
    {
        var res = await Http.DeleteAsync($"GroceryLists/{Id}/{productId}");

        if (res.IsSuccessStatusCode)
        {
            groceryList?.Products?.Remove(groceryList.Products.Single(i => i.Id == productId));
            StateHasChanged();
        }
    }

    protected async Task ClickListItem(Guid productId)
    {
        var product = groceryList?.Products?.Single(i => i.Id == productId);
        var res = await Http.PutAsync($"GroceryLists/{Id}", JsonSerializerHelper.Process(product));

        if (res.IsSuccessStatusCode)
        {
            // Something to think about: is it more correct to find and update the original item, or update the item entirely?
            // To update the item entirely without losing index, we must switch from using an ICollection to a List
            var resProduct = await HttpResultHelper.Process(res, () => res.Content.ReadFromJsonAsync<ProductDto>());
            var originalProduct = groceryList?.Products?.Single(i => i.Id == resProduct?.Id);
            originalProduct.IsCheckedOff = resProduct.IsCheckedOff;
            StateHasChanged();
        }
    }
}
