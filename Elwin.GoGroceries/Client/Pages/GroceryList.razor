@using Elwin.GoGroceries.Client.Helpers;
@using Elwin.GoGroceries.Contracts;
@using Elwin.GoGroceries.Client.Components;
@inject HttpClient Http
@inject NavigationManager Navigation
@page "/grocerylist/{id:guid}"

<MudPaper Width="100%">
    @if(categories is not null)
    {
        <MudExpansionPanels MultiExpansion="true">
            @foreach(var category in categories)
            {
                <MudExpansionPanel Text="@category.Name">
                    <ListComponent Items="groceryList?.GroceryItems?.Where(i => i.CategoryId == category.Id)" OnAdd="AddNew" OnDelete="Delete"></ListComponent>
                </MudExpansionPanel >
            }
            <MudExpansionPanel Text="Unassigned items">
                <ListComponent Items="groceryList?.GroceryItems?.Where(i => i.CategoryId is null)" OnAdd="AddNew" OnDelete="Delete"></ListComponent>
            </MudExpansionPanel >
        </MudExpansionPanels>
    } 
</MudPaper>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private GroceryListDto? groceryList { get; set; }
    private IEnumerable<CategoryDto>? categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var categoriesRes = await Http.GetAsync($"Categories");
        categories = await HttpResultHelper.Process(categoriesRes, () => categoriesRes.Content.ReadFromJsonAsync<IEnumerable<CategoryDto>>());

        var groceryListRes = await Http.GetAsync($"GroceryLists/{Id}");
        groceryList = await HttpResultHelper.Process(groceryListRes, () => groceryListRes.Content.ReadFromJsonAsync<GroceryListDto>());
    }

    protected void AddNew()
    {
        Navigation.NavigateTo($"/groceryList/{Id}/add");
    }

    protected async Task Delete(Guid itemId)
    {
        var res = await Http.DeleteAsync($"GroceryLists/{Id}/{itemId}");

        if (res.IsSuccessStatusCode)
        {
            groceryList?.GroceryItems?.Remove(groceryList.GroceryItems.Single(i => i.Id == itemId));
            StateHasChanged();
        }
    }
}
