@using Elwin.GoGroceries.Client.Helpers;
@using Elwin.GoGroceries.Contracts;
@using Elwin.GoGroceries.Client.Components;
@inject HttpClient Http
@inject NavigationManager Navigation
@page "/grocerylist/{id:guid}"

<MudPaper Width="100%">
    @if(categories is not null & groceryList?.Products is not null)
    {
        <MudExpansionPanels MultiExpansion="true">
            @foreach(var category in categories)
            {
                <MudExpansionPanel Text="@category.Name">
                    <ul>
                        @foreach(var item in groceryList.Products.Where(i => i.CategoryId == category.Id))
                        {
                            <ListItemComponent Item="item" OnDelete="Delete">
                                <div style="display: flex; justify-content: space-around">
                                    <div style="width: 30%">
                                        @if(item.Quantity is not null)
                                        {
                                            <MudChip Variant="Variant.Text" Color="Color.Tertiary">@string.Concat("x", item.Quantity)</MudChip>
                                        }
                                    </div>
                                    <div style="width: 70%">
                                        @if(item.Weight is not null)
                                        {
                                            <MudChip Variant="Variant.Text" Color="Color.Info" Style="margin-left: 0.7rem;">@string.Concat(@item.Weight, "g")</MudChip>
                                        }
                                    </div>
                                </div>
                            </ListItemComponent>
                            <MudDivider />
                        }
                        <li @onclick="() => AddNew()">
                            <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon> Add item
                        </li>
                    </ul>
                </MudExpansionPanel >
            }
            <MudExpansionPanel Text="Unassigned items">
                    <ul>
                        @foreach(var item in groceryList.Products.Where(i => i.CategoryId is null))
                        {
                            <ListItemComponent Item="item" OnDelete="Delete"></ListItemComponent>
                        }
                        <li @onclick="() => AddNew()">
                            <MudIcon Icon="@Icons.Material.Filled.Add"></MudIcon> Add item
                        </li>
                    </ul>
            </MudExpansionPanel >
        </MudExpansionPanels>
    } 
</MudPaper>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private GroceryListDto? groceryList { get; set; }
    private IEnumerable<CategoryDto>? categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var categoriesRes = await Http.GetAsync($"Categories");
        categories = await HttpResultHelper.Process(categoriesRes, () => categoriesRes.Content.ReadFromJsonAsync<IEnumerable<CategoryDto>>());

        var groceryListRes = await Http.GetAsync($"GroceryLists/{Id}");
        groceryList = await HttpResultHelper.Process(groceryListRes, () => groceryListRes.Content.ReadFromJsonAsync<GroceryListDto>());
    }

    protected void AddNew()
    {
        Navigation.NavigateTo($"/groceryList/{Id}/add");
    }

    protected async Task Delete(Guid itemId)
    {
        var res = await Http.DeleteAsync($"GroceryLists/{Id}/{itemId}");

        if (res.IsSuccessStatusCode)
        {
            groceryList?.Products?.Remove(groceryList.Products.Single(i => i.Id == itemId));
            StateHasChanged();
        }
    }
}
