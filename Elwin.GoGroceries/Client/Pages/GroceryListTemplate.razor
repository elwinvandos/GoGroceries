@using Elwin.GoGroceries.Client.Helpers;
@using Elwin.GoGroceries.Contracts;
@using Elwin.GoGroceries.Client.Components;
@using Elwin.GoGroceries.Contracts.Product;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IDialogService DialogService
@page "/template/{id:guid}"

<style>
    /* MudBlazor overrides don't work in global or scoped css. I haven't managed to figure out why. This is a temporary workaround */
    h6 {
        margin-bottom: 0rem !important;
    }

    .mud-expand-panel-header {
        padding: 6px 12px !important;
    }
</style>

@if (categories is not null & template?.Products is not null)
{
    @if (template?.Products?.Count() > 0)
    {
        <MudPaper Width="100%">
            <MudExpansionPanels MultiExpansion="true" Dense="true" DisableGutters="true">
                @foreach (var category in categories)
                {
                    @if (template.Products.Any(i => i.CategoryId == category.Id))
                    {
                        <MudExpansionPanel IsInitiallyExpanded="true" Style="@($"background-color: {category.ColorCode};")" Class="custom-panel-header">
                            <TitleContent>
                                <div style="display: flex; align-items: center; justify-content: space-between; margin-bottom: 0rem !important;">
                                    <h6 style="display: flex; align-items: center; justify-content: space-between;">
                                        <div>@category.Name</div>
                                        <MudIcon Icon="@Icons.Material.Filled.Edit" Class="edit-icon" Size="Size.Small" @onclick="() => EditCategory(category.Id)" />
                                    </h6>
                                    <MudIconButton Icon="@Icons.Material.Filled.Add" Color="Color.Tertiary" @onclick="() => AddNew(category.Id)" Size="Size.Small" Style="margin-right: 1rem;"></MudIconButton>
                                </div>
                            </TitleContent>
                            <ChildContent>
                                <ul>
                                    @foreach (var item in template.Products.Where(i => i.CategoryId == category.Id))
                                    {
                                        <ListProductComponent Product="item" OnEdit="EditProduct" OnDelete="Delete"></ListProductComponent>
                                    }
                                </ul>
                            </ChildContent>
                        </MudExpansionPanel>
                    }
                }
            </MudExpansionPanels>
        </MudPaper>
        <div style="display: flex; align-items: center; justify-content: space-between; margin-top: 0.5rem;">
            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="() => AddNew()">Add product</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.LocalGroceryStore" Size="Size.Small" OnClick="() => ToGroceryList()">Create grocery list</MudButton>
        </div>
    }
    else
    {
        <div style="display: flex; align-items: center; justify-content: center;">
            <MudButton Variant="Variant.Filled" Color="Color.Tertiary" OnClick="() => AddNew()">Add first product</MudButton>
        </div>
    }
}

@code {
    [Parameter]
    public Guid Id { get; set; }

    private TemplateDto template { get; set; } = new() { Products = new List<TemplateProductDto>() };
    private IEnumerable<CategoryDto>? categories { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var categoriesRes = await Http.GetAsync($"Categories");
        categories = await HttpResultHelper.Process(categoriesRes, () => categoriesRes.Content.ReadFromJsonAsync<IEnumerable<CategoryDto>>());

        var groceryListRes = await Http.GetAsync($"Templates/{Id}");
        template = await HttpResultHelper.Process(groceryListRes, () => groceryListRes.Content.ReadFromJsonAsync<TemplateDto>());
    }

    protected void AddNew()
    {
        Navigation.NavigateTo($"/template/{Id}/add");
    }

    protected void AddNew(Guid categoryId)
    {
        Navigation.NavigateTo($"/template/{Id}/add/{categoryId}");
    }

    protected async void ToGroceryList()
    {
        var dialogRes = await DialogService.ShowMessageBox("Create grocery list", "Do you want to create a new grocery list from this template?", yesText: "Yes", cancelText: "No");

        if (dialogRes is true)
        {
            var res = await Http.PutAsync($"templates/toGroceryList/{Id}", null);

            if (res.IsSuccessStatusCode)
            {
                Navigation.NavigateTo($"/");
            }
        }
    }

    protected async void EditCategory(Guid id)
    {
        Navigation.NavigateTo($"/categories/{id}");
    }

    protected async void EditProduct(Guid productId)
    {
        Navigation.NavigateTo($"/{Id}/templateProducts/{productId}");
    }

    protected async Task Delete(Guid productId)
    {
        var dialogRes = await DialogService.ShowMessageBox("Warning", "Do you want to delete this product?", yesText: "Delete", cancelText: "Cancel");

        if (dialogRes is true)
        {
            var res = await Http.DeleteAsync($"templates/{Id}/{productId}");

            if (res.IsSuccessStatusCode)
            {
                template?.Products?.Remove(template.Products.Single(i => i.Id == productId));
                StateHasChanged();
            }
        }
    }

    public async Task SaveGroceryList()
    {
        var res = await Http.PutAsync($"Templates", JsonSerializerHelper.Process(template));

        if (!res.IsSuccessStatusCode)
        {
            // handle error in MainLayout
        }
    }
}
